# This code was generated by FFIG <http://ffig.org>.
# Manual edits will be lost.

require 'ffi'

module {{module.name}}_c
  extend FFI::Library
  ffi_lib ['{{module.name}}_c',
           File.dirname(__FILE__) + '/lib{{module.name}}_c.so',
           File.dirname(__FILE__) + '/lib{{module.name}}_c.dylib' ]
{% for class in classes %}
  attach_function :{{module.name}}_{{class.name}}_dispose, [:pointer], :void
  attach_function :{{module.name}}_error, [], :string
  attach_function :{{module.name}}_clear_error, [], :void 
  {% for method in class.methods %}
  attach_function :{{module.name}}_{{class.name}}_{{method.name}}, [:pointer{% for arg in method.arguments %}, :{{arg.type|to_ruby_type}}{% endfor %}, :pointer], :int
  {% endfor %}
  {% for impl in class.impls %}{% for method in impl.constructors %}
  attach_function :{{module.name}}_{{impl.name}}_create, [{% for arg in method.arguments %}:{{arg.type|to_ruby_type}},{% endfor %} :pointer], :int
  {% endfor %}{% endfor %}
{% endfor %}

end

class {{module.name}}Error < Exception
  def initialize()
    msg = {{module.name}}_c.{{module.name}}_error
    {{module.name}}_c.{{module.name}}_clear_error()
    super(msg)
  end
end

{% for class in classes %}
class {{class.name}}
  def initialize(objptr)
    @ptr = objptr.get_pointer(0)
    ObjectSpace.define_finalizer( self, self.class.finalize(@ptr) )
  end

  def self.finalize(ptr)
    proc { {{module.name}}_c.{{module.name}}_{{class.name}}_dispose(ptr) }
  end
  {% for method in class.methods %}
  def {{method.name}}()
    dptr = {{method.return_type|to_ruby_output_type}}
    rc = {{module.name}}_c.{{module.name}}_{{class.name}}_{{method.name}}(@ptr, dptr)
    if rc != 0
      raise {{module.name}}Error
    end
    dptr.{{method.return_type|restore_ruby_type}}
  end
{% endfor %}end

{% for impl in class.impls %}{% for method in impl.constructors %}
class {{impl.name}} < {{class.name}}
  def initialize({% for arg in method.arguments %}{{arg.name}}{% if not loop.last %},{% endif %}{% endfor %})
    objptr = FFI::MemoryPointer.new :pointer
    rc = {{module.name}}_c.{{module.name}}_{{impl.name}}_create({% for arg in method.arguments %}{{arg.name}}, {% endfor %}objptr)
    if rc != 0
      raise {{module.name}}Error
    end
    super(objptr)
  end
end
{% endfor %}
{%- endfor %}
{%- endfor %}

