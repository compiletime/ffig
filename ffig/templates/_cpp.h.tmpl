{% import 'ffig.macros' as ffig_macros -%}

{#
 # method_parameters:
 #   Generates a list of parameter types and names suitable for use in a
 #   function declaration or definition. Commas are inserted between each
 #   element of the list. Leading and trailing commas can be added by setting
 #   leading_comma or trailing_comma to True as appropriate. This is useful
 #   if there are other parameters that must be declared.
 #}
{% macro method_parameters(method, leading_comma=False, trailing_comma=False) %}
    {% call(arg) ffig_macros.comma_separated_list(method.arguments, leading_comma, trailing_comma) -%}
        {{arg.type}} {{arg.name}}
    {%- endcall %}
{% endmacro -%}

{#
 # method_arguments:
 #   Generates a list of argument names suitable for use in a
 #   function call.  Commas are inserted between each element of the list.
 #   Leading and trailing commas can be added by setting leading_comma or
 #   trailing_comma to True as appropriate. This is useful if there are other
 #   parameters that must be declared.
 #}
{% macro method_arguments(method, leading_comma=False, trailing_comma=False) %}
    {% call(arg) ffig_macros.comma_separated_list(method.arguments, leading_comma, trailing_comma) -%}
        {{arg | c_object}}
    {%- endcall %}
{% endmacro -%}

// This code was generated by FFIG <http://ffig.org>.
// Manual edits will be lost.

#include <exception>
#include <string>
#include "{{module.name}}_c.h"
namespace CPP_API {
{% for class in classes %}

class {{class.name}}
{
protected:
  {{module.name}}_{{class.name}} object_ = nullptr;
  {{class.name}}() = default;

public:
{% if not class.is_abstract %}
  {% for method in class.constructors %}

  {{class.name}}({{method_parameters(method)}})
  {
    int rc = {{module.name}}_{{class.name}}_create(
      {{method_arguments(method, trailing_comma=True)}}
      &object_);
    if ( rc == {{module.name}}_RC_SUCCESS ) return;
    throw exception();
  }
  {% endfor %}
{% endif %}

  {{class.name}}(const {{class.name}}&) = delete;
  {{class.name}}& operator = (const {{class.name}}&) = delete;
  {{class.name}}({{class.name}}&& c)
  {
    object_ = c.object_;
    c.object_ = nullptr;
  }

  {{class.name}}& operator = ({{class.name}}&& c)
  {
    if(object_) {{module.name}}_{{class.name}}_dispose(object_);
    object_ = c.object_;
    c.object_ = nullptr;
    return *this;
  }

  class exception : public std::runtime_error
  {
  public:
    exception() : std::runtime_error({{module.name}}_error())
    {
      {{module.name}}_clear_error();
    }
  };

  virtual ~{{class.name}}()
  {
    {{module.name}}_{{class.name}}_dispose(object_);
  }
{% for method in class.methods %}

  {{method.return_type | to_cpp_type}} {{method.name}}({{method_parameters(method)}}) const
  {
    {% if method.returns_void %}
    int rc = {{module.name}}_{{class.name}}_{{method.name}}(
      object_
      {{method_arguments(method, leading_comma=True)}});
    {% else %}
    {{method.return_type | to_cpp_type}} rv;
    {% if method.returns_sub_object %}
    int rc = {{module.name}}_{{class.name}}_{{method.name}}(
      object_
      {{method_arguments(method, leading_comma=True, trailing_comma=False)}},
      &rv.object_);
    {% else %}
    int rc = {{module.name}}_{{class.name}}_{{method.name}}(
      object_
      {{method_arguments(method, leading_comma=True, trailing_comma=False)}},
      &rv);
    {% endif %}
    {% endif %}

    if (rc == {{module.name}}_RC_SUCCESS)
    {
        return{% if not method.returns_void %} rv {% endif %};
    }
    throw exception();
  }
{% endfor %}
};
{% for impl in class.impls %}

class {{impl.name}} : public {{class.name}}
{
public:
  {% for method in impl.constructors %}

  {{impl.name}}({{method_parameters(method)}})
  {
    int rc = {{module.name}}_{{impl.name}}_create(
      {{method_arguments(method, trailing_comma=True)}}
      &object_);
    if ( rc == {{module.name}}_RC_SUCCESS )
    {
      return;
    }
    throw exception();
  }
  {% endfor %}
};
{% endfor %}
{% endfor %}
} // end namespace CPP_API
